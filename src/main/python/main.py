#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Created on Mon Mar 19 15:38:35 2018

@author(s)   : Francesco Urbani
@file        : main.py
@descritpion : The main file

"""

# ============================================================
##from fbs_runtime.application_context import ApplicationContext
# ============================================================
from PyQt5.QtWidgets import QMainWindow, QAction, QStatusBar, QToolBar, QMenuBar, QMessageBox
from PyQt5.QtGui import QIcon
from PyQt5 import QtCore, QtGui, QtWidgets
# from PyQt5.QtCore import QSize

from syRF_ui import Ui_MainWindow # main ui window autogenerated by PyQt

# other windows
import rect2polar 
import lambda4                   
import matching

#import math                      # do math
#import cmath                     # do math with complex numbers
#import numpy as np               # manipulate arrays + math stuff
#import matplotlib.pyplot as plt  # plot nice graphs
import os


# my files
import check_update
import Y_tab
import S_tab
import open_pdf



msg_error = "" # display nothing if error occurs



class mainProgram(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(mainProgram, self).__init__(parent)
        self.setupUi(self)
        

        # on startup check on remote repo whether there is a 
        # new commit and notify the user by updating the label
        self.label_updates.setText(check_update.check())

        # set window title, overwriting window title in syRF_ui.py
        self.setWindowTitle("syRF {}".format(check_update.get_version()))


        ## setup menu bar
        
        self.status = QStatusBar()
        self.setStatusBar(self.status)

        
        # Uncomment to disable native menubar on Mac
        self.menuBar().setNativeMenuBar(False)


    
        # 1
        syRF_toolbar = QToolBar("syRF")
        # syRF_toolbar.setIconSize(QSize(14, 14))
        self.addToolBar(syRF_toolbar)
        syRF_menu = self.menuBar().addMenu("&syRF")


        about_action = QAction("About", self)
        # about_action.setStatusTip("Quitting...")
        about_action.triggered.connect(self.open_about)
        syRF_menu.addAction(about_action)

        syRF_menu.addSeparator()

        quit_action = QAction("Quit", self)
        # quit_action.setStatusTip("Quitting...")
        quit_action.triggered.connect(self.quit_app)
        syRF_menu.addAction(quit_action)

        # 2
        tools_toolbar = QToolBar("Tools")
        # "<span style=' text-decoration: underline;'>T</span>ools"
        self.addToolBar(tools_toolbar)
        tools_menu = self.menuBar().addMenu("&Tools")

        matching_tool = QAction("Matching", self)
        matching_tool.setStatusTip("Open matching window")
        matching_tool.triggered.connect(self.open_matching)
        tools_menu.addAction(matching_tool)
        
        rect2polar_tool = QAction("rect2polar", self)
        rect2polar_tool.setStatusTip("Open rect2polar")
        rect2polar_tool.triggered.connect(self.launch_rect2polar)
        tools_menu.addAction(rect2polar_tool)

        lambda4_tool = QAction("λ/4", self)
        lambda4_tool.setStatusTip("Open λ/4 calculator")
        lambda4_tool.triggered.connect(self.open_lambda4)
        tools_menu.addAction(lambda4_tool)


        # 3
        docs_toolbar = QToolBar("Docs")
        self.addToolBar(docs_toolbar)
        docs_menu = self.menuBar().addMenu("&Docs")

        y_formula_tool = QAction("Y formulas", self)
        y_formula_tool.triggered.connect(self.open_Y_formulas)
        docs_menu.addAction(y_formula_tool)

        s_formula_tool = QAction("S formulas", self)
        s_formula_tool.triggered.connect(self.open_S_formulas)
        docs_menu.addAction(s_formula_tool)

        syRF_menu.addSeparator()

        BJT_2N4957_datasheet_tool = QAction("2N4957 Datasheet", self)
        BJT_2N4957_datasheet_tool.triggered.connect(self.open_datasheet_Y)
        docs_menu.addAction(BJT_2N4957_datasheet_tool)

        MRF5712_datasheet_tool = QAction("MRF571/2 Datasheet", self)
        MRF5712_datasheet_tool.triggered.connect(self.open_datasheet_S)
        docs_menu.addAction(MRF5712_datasheet_tool)



        # self.tabWidget.setCurrentIndex(1)
        self.checkBox.setChecked(True)
        self.checkBox_2.setChecked(True)

        self.f0_box_2.setFocus()  # set focus on frequency of Y tab on startup

        

        self.radioButton_CE.setChecked(True) # radioButton is checked on startup. Common emitter is the default config.
        self.radioButton_MRF571.setChecked(True) # radioButton_MRF571 is the default
        self.radioButton_5.setChecked(True) # insert impedance as Z is the default
        self.Fill_ys_yl_opt_button.setEnabled(False)
        
        # self.Z0_box.setEnabled(False) # Z0 is disabled by default, i.e. it's fixed @ 50 ohm
        self.plot_isc_button_2.setEnabled(False)
        

        # Y
        self.f0_box_2.editingFinished.connect(self.fill_Y_boxes)
        self.f0_box_2.editingFinished.connect(self.Calculate_button_4.click)
        self.radioButton_CE.toggled['bool'].connect(self.fill_Y_boxes)
        self.radioButton_CE.toggled['bool'].connect(self.Calculate_button_4.click)

        self.checkBox.stateChanged.connect(self.disable_2N4957)
        self.checkBox_2.stateChanged.connect(self.disable_MRF57)

        self.y_i_box_2.editingFinished.connect(self.Calculate_button_4.click)
        self.y_f_box_2.editingFinished.connect(self.Calculate_button_4.click)
        self.y_o_box_2.editingFinished.connect(self.Calculate_button_4.click)
        self.y_r_box_2.editingFinished.connect(self.Calculate_button_4.click)
        self.y_s_box_2.editingFinished.connect(self.Calculate_button_4.click)
        self.y_L_box_2.editingFinished.connect(self.Calculate_button_4.click)

        self.Calculate_button_4.clicked.connect(self.compute_Y_2N4957)
        self.show_plots_button.clicked.connect(self.show_plot_Y_parameters)
        self.open_datasheet_Y_button.clicked.connect(self.open_datasheet_Y)

        self.plot_C_f0_button.clicked.connect(self.plot_C_vs_f)

        self.Clean_button_3.clicked.connect(self.clean_Y_2N4957)
        self.Clean_all_button_4.clicked.connect(self.clean_all_Y_2N4957)
        self.Fill_ys_yl_opt_button.clicked.connect(self.fill_ys_yl_opt_2N4957)
        

        # S
        self.vce_box.editingFinished.connect(self.fill_S_boxes)
        self.ic_box.editingFinished.connect(self.fill_S_boxes)
        self.f_box.editingFinished.connect(self.fill_S_boxes)
        
        self.vce_box.editingFinished.connect(self.Calculate_button_5.click)
        self.ic_box.editingFinished.connect(self.Calculate_button_5.click)
        self.f_box.editingFinished.connect(self.Calculate_button_5.click)

        

        self.s11_box.editingFinished.connect(self.Calculate_button_5.click)
        self.s21_box.editingFinished.connect(self.Calculate_button_5.click)
        self.s12_box.editingFinished.connect(self.Calculate_button_5.click)
        self.s22_box.editingFinished.connect(self.Calculate_button_5.click)

        self.radioButton_MRF571.toggled['bool'].connect(self.fill_S_boxes)
        self.radioButton_MRF571.toggled['bool'].connect(self.Calculate_button_5.click)

        self.Z0_box.editingFinished.connect(self.Calculate_button_5.click)
        self.ZS_box.editingFinished.connect(self.Calculate_button_5.click)
        self.ZL_box.editingFinished.connect(self.Calculate_button_5.click)

        self.ZS_box_2.editingFinished.connect(self.Calculate_button_5.click)
        self.ZS_box_5.editingFinished.connect(self.Calculate_button_5.click)
        self.ZS_box_4.editingFinished.connect(self.Calculate_button_5.click)
        self.ZS_box_3.editingFinished.connect(self.Calculate_button_5.click)
        
        self.radioButton_5.toggled['bool'].connect(self.disable_enable_Z_or_gamma_input)
        self.radioButton_5.toggled['bool'].connect(self.Calculate_button_5.click)


        self.GAdb_box_2.editingFinished.connect(self.Calculate_button_5.click)
        self.GPdb_box_2.editingFinished.connect(self.Calculate_button_5.click)
        self.GTdb_box_2.editingFinished.connect(self.Calculate_button_5.click)
        self.NFmindb_box_2.editingFinished.connect(self.Calculate_button_5.click)
        self.NFdb_box_2.editingFinished.connect(self.Calculate_button_5.click)
        self.rn_box_2.editingFinished.connect(self.Calculate_button_5.click)
        self.gamma_s_on_box.editingFinished.connect(self.Calculate_button_5.click)

        self.plot_isc_button_2.clicked.connect(self.smith_plot_all)
        self.open_datasheet_button.clicked.connect(self.open_datasheet_S)
        self.Calculate_button_5.clicked.connect(self.compute_S_MRF571)
        self.clean_S_button.clicked.connect(self.clean_S_MRF571)
        self.Clean_all_button_6.clicked.connect(self.clean_all_S_MRF571) 


        



    # ------------------------------------------------------------------------------------
    
    def fill_Y_boxes(self):
        Y_tab.fill_Y_boxes(self)


    def compute_Y_2N4957(self):
        Y_tab.compute_Y_2N4957(self)

    def show_plot_Y_parameters(self):
        Y_tab.show_plot_Y_parameters(self)

    def open_datasheet_Y(self):
        open_pdf.open_pdf("2N4957/2N4957.pdf")

    def open_Y_formulas(self):
        open_pdf.open_pdf("../../../doc/Formulario-ETLC_Y.pdf") # from here: https://github.com/giuliof/Dispense-ETLC

    def plot_C_vs_f(self):
        Y_tab.plot_C_vs_f(self)

    def clean_Y_2N4957(self):
        Y_tab.clean_Y_2N4957(self)

    def clean_all_Y_2N4957(self):
        Y_tab.clean_all_Y_2N4957(self)

    def fill_ys_yl_opt_2N4957(self):
        Y_tab.fill_ys_yl_opt_2N4957(self)

    def disable_2N4957(self):
        if not self.checkBox.isChecked():
            self.label_165.setEnabled(False)
            self.label_166.setEnabled(False)
            self.label_118.setEnabled(False)
            self.label_37.setEnabled(False)
            self.label_38.setEnabled(False)
            self.label_8.setEnabled(False)
            self.radioButton_CE.setEnabled(False)
            self.radioButton_CB.setEnabled(False)
            self.f0_box_2.setEnabled(False)
            self.y_i_box_2.setFocus()
        else:
            self.label_165.setEnabled(True)
            self.label_166.setEnabled(True)
            self.label_118.setEnabled(True)
            self.label_37.setEnabled(True)
            self.label_38.setEnabled(True)
            self.label_8.setEnabled(True)
            self.radioButton_CE.setEnabled(True)
            self.radioButton_CB.setEnabled(True)
            self.f0_box_2.setEnabled(True)
            self.f0_box_2.setFocus()


    def fill_S_boxes(self):
        S_tab.fill_S_boxes(self)

    def compute_S_MRF571(self):
        S_tab.compute_S_MRF571(self)


    def open_datasheet_S(self):
        open_pdf.open_pdf("MRF57/MRF57.pdf")

    def open_S_formulas(self):
        open_pdf.open_pdf("../../../doc/Formulario-ETLC_S.pdf") # from here: https://github.com/giuliof/Dispense-ETLC
        
    def smith_plot_all(self):
        S_tab.smith_plot_all(self)
        
    def draw_equi_GA_stability_circles(self):
        S_tab.draw_equi_GA_stability_circles(self)


    def launch_rect2polar(self):
        window = rect2polar.utilProgram(self)
        window.show()


    def clean_S_MRF571(self):
        S_tab.clean_S_MRF571(self)


    def clean_all_S_MRF571(self):
        S_tab.clean_all_S_MRF571(self)


    def disable_MRF57(self):
        S_tab.disable_MRF57(self)
    

    def disable_enable_Z_or_gamma_input(self):
        S_tab.disable_enable_Z_or_gamma_input(self)


    def open_lambda4(self):
        window = lambda4.lambda4_window(self)
        window.show()

    def open_matching(self):
        window = matching.mainProgram(self)
        window.show()
        


    def quit_app(self):
        result = QMessageBox.question(self, "Confirm exit", "Are you sure you want to quit?", QMessageBox.No|QMessageBox.Yes)
        if result == QMessageBox.Yes:
            self.close()


    def open_about(self):
        url = "https://urbanij.github.io/syRF/"
        os.system("open {}".format(url))


    # A key has been pressed!
    def keyPressEvent(self, event):
        # Did the user press the Escape key?
        if event.key() == QtCore.Qt.Key_W:
            self.quit_app()
        elif event.key() == QtCore.Qt.Key_T:
            print ("value")

        

if __name__ == "__main__":

    import sys
    app = QtWidgets.QApplication(sys.argv)
    nextGui = mainProgram()
    nextGui.show()
    sys.exit(app.exec_())
