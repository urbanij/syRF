#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Created on Mon Mar 19 15:38:35 2018

@author(s)   : Francesco Urbani
@file        : main.py
@descritpion : The main file

"""

from PyQt5.QtWidgets import QMainWindow, QAction, QStatusBar, QToolBar, QMenuBar, QMessageBox
from PyQt5.QtGui import QIcon
from PyQt5 import QtCore, QtGui, QtWidgets
# from PyQt5.QtCore import QSize

from matching_ui import Ui_MainWindow # main ui window autogenerated by PyQt


import plot_reflection_coefficient
import LC_matching_tab
import microstrip_matching
import quarter_wave_matching
import microstrip_matching_tab
import open_pdf

msg_error = "" # display nothing if error occurs



class mainProgram(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(mainProgram, self).__init__(parent)
        self.setupUi(self)


        self.radioButton.setChecked(True) # Z of quarter wave impedance matching set
        self.plot.setEnabled(False)

        
        # LC_matching
        self.f0_box.editingFinished.connect(self.Calculate_button_3.click)
        self.input_box.editingFinished.connect(self.Calculate_button_3.click)
        self.output_box.editingFinished.connect(self.Calculate_button_3.click)
        self.comboBox.currentIndexChanged['QString'].connect(self.Calculate_button_3.click)
        self.comboBox_2.currentIndexChanged['QString'].connect(self.Calculate_button_3.click)
        self.open_pdf_sketch_button.clicked.connect(self.open_pdf_sketch_matching)
        # self.comboBox_3.currentIndexChanged['QString'].connect(self.Calculate_button_3.click)

        self.Calculate_button_3.clicked.connect(self.compute_LC_matching)
        self.Clean_all_button_3.clicked.connect(self.clean_all_LC_matching)
        self.Clean_all_button_3.clicked.connect(self.Calculate_button_3.click)
        self.plot.clicked.connect(self.plot_reflection_coefficient)
        


        # microstrip_matching
        # first col
        self.l_lambda_box.editingFinished.connect(self.calculate_button_6.click)
        self.z0box.editingFinished.connect(self.calculate_button_6.click)
        self.epsilon_r_box.editingFinished.connect(self.calculate_button_6.click)
        self.h_box.editingFinished.connect(self.calculate_button_6.click)
        self.f_box_3.editingFinished.connect(self.calculate_button_6.click)

        # second col
        self.length_box_2.editingFinished.connect(self.calculate_button_6.click)
        self.w_box_2.editingFinished.connect(self.calculate_button_6.click)
        self.h_box_2.editingFinished.connect(self.calculate_button_6.click)
        self.epsilon_r_box_2.editingFinished.connect(self.calculate_button_6.click)
        self.f_box_4.editingFinished.connect(self.calculate_button_6.click)

        self.calculate_button_6.clicked.connect(self.compute_matching_microstrip)
        self.clean_all_button4.clicked.connect(self.clean_all_microstrip_tab)
        self.open_plot_button.clicked.connect(self.open_plots)
        self.show_er_plots_button.clicked.connect(self.show_plots)
        
        

        
        # MAKE QUARTER WAVE CALCULATE BUTTON AND SHOW SMITH PLOT BUTTON

        # quarter_wave_matching

        self.radioButton.toggled['bool'].connect(self.disable_boxes_quarter_wave_im)

        self.Z0_box2.editingFinished.connect(self.Calculate_quarter.click)

        self.Z_in_box.editingFinished.connect(self.Calculate_quarter.click)
        self.Z_out_box.editingFinished.connect(self.Calculate_quarter.click)
        
        self.ZS_box_9.editingFinished.connect(self.Calculate_quarter.click)
        self.ZS_box_6.editingFinished.connect(self.Calculate_quarter.click)
        self.ZS_box_7.editingFinished.connect(self.Calculate_quarter.click)
        self.ZS_box_8.editingFinished.connect(self.Calculate_quarter.click)

        
        self.Calculate_quarter.clicked.connect(self.calculate_tab_quarter_wave_im)
        self.Show_Smith.clicked.connect(self.showSmithPlot)
        self.clean_all_button213.clicked.connect(self.clean_all_quarter_wave)







    def compute_LC_matching(self):
        LC_matching_tab.compute_LC_matching(self)

    def clean_all_LC_matching(self):
        LC_matching_tab.clean_all_LC_matching(self)

    def plot_reflection_coefficient(self):
        plot_reflection_coefficient.plot_gamma( LC_matching_tab.compute_LC_matching(self) )

    def open_pdf_sketch_matching(self):
        open_pdf.open_pdf("../../../aux/matching_network.pdf")


    def compute_matching_microstrip(self):
        microstrip_matching_tab.compute_matching_microstrip(self)

    def open_plots(self):
        open_pdf.open_pdf("microstrip_matching/epsilon_r_graphs.pdf")


    def show_plots(self):
        microstrip_matching_tab.show_plots(self)

    def clean_all_microstrip_tab(self):
        microstrip_matching_tab.clean_all_microstrip_tab(self)





    def showSmithPlot(self):
        quarter_wave_matching.showSmithPlot(self)

    def calculate_tab_quarter_wave_im(self):
        quarter_wave_matching.calculate_tab_quarter_wave_im(self)

    def disable_boxes_quarter_wave_im(self):
        quarter_wave_matching.disable_boxes_quarter_wave_im(self)

    def clean_all_quarter_wave(self):
        quarter_wave_matching.clean_all_quarter_wave(self)



    def calculate_z_lambda4(self):
        lambda4.calculate_z_lambda4(self)

    def clean_lambda4(self):
        self.z1_box.setText("")
        self.z2_box.setText("")
        self.z1_box.setFocus()
        self.Calculate_lambda4.click()

    def quit_app(self):
        result = QMessageBox.question(self, "Confirm delete", "Are you sure you want to quit Matching Tool?")
        if result == QMessageBox.Yes:
            self.close()

    # A key has been pressed!
    def keyPressEvent(self, event):
        # Did the user press the Escape key?
        if event.key() == QtCore.Qt.Key_W:
            self.quit_app()
        elif event.key() == QtCore.Qt.Key_T:
            pass

        

if __name__ == "__main__":

    import sys
    app = QtWidgets.QApplication(sys.argv)
    nextGui = mainProgram()
    nextGui.show()
    sys.exit(app.exec_())
