#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Created on Wed Dec 18 13:15:45 CET 2019

@author(s)   : Francesco Urbani
@file        : stub_matching.py
@descritpion :

"""

from PyQt5.QtWidgets import QMainWindow, QAction, QStatusBar, QToolBar, QMenuBar, QMessageBox
from PyQt5 import QtCore, QtGui, QtWidgets
import math

from pyui.stub_matching_ui import Ui_MainWindow # main ui window autogenerated by PyQt


msg_error = ""
SPINBOX_STEP = 0.0001
SPINBOX_DECIMALS = 6

MIN_SCROLLBAR = 0
MAX_SCROLLBAR = 500
STEP_SCROLLBAR = 1


def parallel(z1, z2):
    return (z1*z2)/(z1+z2)



class mainProgram(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(mainProgram, self).__init__(parent)
        self.setupUi(self)


        self.Z0_lineedit.editingFinished.connect(self.Calculate_button.click)
        self.ZL_lineedit.editingFinished.connect(self.Calculate_button.click)
        self.Z0_stub_lineedit.editingFinished.connect(self.Calculate_button.click)

        self.OC_radioButton.toggled.connect(self.Calculate_button.click)
        self.SC_radioButton.toggled.connect(self.Calculate_button.click)

        self.parallel_stub_radioButton.toggled.connect(self.Calculate_button.click)
        self.series_stub_radioButton.toggled.connect(self.Calculate_button.click)

        self.distance_horizontalScrollBar.valueChanged.connect(self.Calculate_button.click)
        self.length_horizontalScrollBar.valueChanged.connect(self.Calculate_button.click)     

        self.Calculate_button.clicked.connect(self.calculate_matching)
        self.ZL_lineedit.setFocus()

        self.calculate_matching()


    def calculate_matching(self):

        if self.parallel_stub_radioButton.isChecked():
            self.setWindowTitle("Parallel Stub Matching")
        elif self.series_stub_radioButton.isChecked():
            self.setWindowTitle("Series Stub Matching")

        if self.parallel_stub_radioButton.isChecked() or self.series_stub_radioButton.isChecked():
            self.label_21.setEnabled(True)
            self.Z0_stub_lineedit.setEnabled(True)
            self.label_20.setEnabled(True)
            self.label_3.setEnabled(True)
            self.OC_radioButton.setEnabled(True)
            self.SC_radioButton.setEnabled(True)
            if self.OC_radioButton.isChecked() or self.SC_radioButton.isChecked():
                self.length_horizontalScrollBar.setEnabled(True)
                self.label_4.setEnabled(True)
                self.label_6.setEnabled(True)
                self.length_lineedit.setEnabled(True)   
            else:
                self.length_horizontalScrollBar.setEnabled(False)
                self.label_4.setEnabled(False)
                self.label_6.setEnabled(False)
                self.length_lineedit.setEnabled(False)   
        else:
            self.label_21.setEnabled(False)
            self.Z0_stub_lineedit.setEnabled(False)
            self.label_20.setEnabled(False)
            self.length_horizontalScrollBar.setEnabled(False)
            self.label_4.setEnabled(False)
            self.label_6.setEnabled(False)
            self.length_lineedit.setEnabled(False)   
            self.label_3.setEnabled(False)
            self.OC_radioButton.setEnabled(False)
            self.SC_radioButton.setEnabled(False)


        # reading
        try:
            ZL = complex(self.ZL_lineedit.text())
        except Exception as e:
            ZL = msg_error
        
        try:
            Z0 = complex(self.Z0_lineedit.text())
        except Exception as e:
            Z0 = msg_error

        try:
            Z0_stub = complex(self.Z0_stub_lineedit.text())
        except Exception as e:
            Z0_stub = msg_error


        d = float(self.distance_horizontalScrollBar.value()*0.5/500)
        self.distance_lineedit.setText("{:.4f}".format(d))
        l =float(self.length_horizontalScrollBar.value()*0.5/500)
        self.length_lineedit.setText("{:.4f}".format(l))



        # computing
        try:
            Zv1 = Z0 * (ZL - 1j*Z0*math.tan(2*math.pi*-d))/(Z0-1j*ZL*math.tan(2*math.pi*-d))
        except Exception as e:
            Zv1 = msg_error

        try:
            if self.OC_radioButton.isChecked():
                Zstub = -1j*Z0_stub/math.tan(2*math.pi*-l)
            elif self.SC_radioButton.isChecked():
                Zstub = 1j*Z0_stub*math.tan(2*math.pi*-l)
        except Exception as e:
            Zstub = math.inf


        try:
            if self.parallel_stub_radioButton.isChecked():
                Zv2 = parallel(Zv1, Zstub)
            elif self.series_stub_radioButton.isChecked():
                Zv2 = Zv1 + Zstub
        except Exception as e:
            Zv2 = msg_error



        # displaying
        try:
            self.Zv1_lineedit.setText("{:.4g}".format(Zv1))
        except Exception:
            self.Zv1_lineedit.setText(msg_error)

        try:
            self.zv1_lineedit.setText("{:.4g}".format(Zv1/Z0))
        except Exception:
            self.zv1_lineedit.setText(msg_error)


        try:
            self.Yv1_lineedit.setText("{:.4g}".format(1/Zv1))
        except Exception:
            self.Yv1_lineedit.setText(msg_error)

        try:
            yv1 = 1/(Zv1/Z0)
            if abs(yv1.real -1)< 0.05:
                self.yv1_lineedit.setStyleSheet("color: green")
                self.distance_lineedit.setStyleSheet("color: green")
            else:
                self.yv1_lineedit.setStyleSheet("color: red")
                self.distance_lineedit.setStyleSheet("color: black")

            self.yv1_lineedit.setText("{:.4g}".format(yv1))
        except Exception as e:
            self.yv1_lineedit.setText(msg_error)




        try:
            self.Zv2_lineedit.setText("{:.4g}".format(Zv2))
        except Exception:
            self.Zv2_lineedit.setText(msg_error)

        try:
            zv2 = Zv2/Z0
            self.zv2_lineedit.setText("{:.4g}".format(zv2))
        except Exception as e:
            self.zv2_lineedit.setText(msg_error)


        try:
            self.Yv2_lineedit.setText("{:.4g}".format(1/Zv2))
        except Exception:
            self.Yv2_lineedit.setText(msg_error)

        try:
            yv2 = 1/(Zv2/Z0)
            if abs(yv2.real-1)<=0.05 and abs(yv2.imag) <= 0.05:
                self.yv2_lineedit.setStyleSheet("color: green")
                self.length_lineedit.setStyleSheet("color: green")
            else:
                self.yv2_lineedit.setStyleSheet("color: red")
                self.length_lineedit.setStyleSheet("color: black")

            self.yv2_lineedit.setText("{:.4g}".format(yv2))
        except Exception as e:
            self.yv2_lineedit.setText(msg_error)


    # A key has been pressed!
    def keyPressEvent(self, event):
        # Did the user press the Escape key?
        if event.key() == QtCore.Qt.Key_W:
            self.close()


if __name__ == "__main__":

    import sys
    app = QtWidgets.QApplication(sys.argv)
    nextGui = mainProgram()
    nextGui.show()
    sys.exit(app.exec_())