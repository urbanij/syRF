#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Created on Wed Dec 18 13:15:45 CET 2019

@author(s)   : Francesco Urbani
@file        : stub_matching.py
@descritpion :

"""

from PyQt5.QtWidgets import QMainWindow, QAction, QStatusBar, QToolBar, QMenuBar, QMessageBox
from PyQt5 import QtCore, QtGui, QtWidgets
import math

import numpy as np
import matplotlib.pyplot as plt


from pyui.stub_matching_ui import Ui_MainWindow # main ui window autogenerated by PyQt


msg_error = ""

RANGE_SCROLLBAR = 0.5
MAX_SCROLLBAR = 1000


def parallel(z1, z2):
    return (z1*z2)/(z1+z2)



class mainProgram(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(mainProgram, self).__init__(parent)
        self.setupUi(self)


        self.Z0_lineedit.editingFinished.connect(self.Calculate_button.click)
        self.ZL_lineedit.editingFinished.connect(self.Calculate_button.click)
        self.Z0_stub_lineedit.editingFinished.connect(self.Calculate_button.click)

        self.OC_radioButton.toggled.connect(self.Calculate_button.click)
        self.SC_radioButton.toggled.connect(self.Calculate_button.click)

        self.parallel_stub_radioButton.toggled.connect(self.Calculate_button.click)
        self.series_stub_radioButton.toggled.connect(self.Calculate_button.click)

        self.distance_horizontalScrollBar.valueChanged.connect(self.Calculate_button.click)
        self.length_horizontalScrollBar.valueChanged.connect(self.Calculate_button.click)     

        self.Calculate_button.clicked.connect(self.calculate_matching)
        self.Plot_impendace_admittance_button.clicked.connect(self.plot_impedance_admittance)

        self.ZL_lineedit.setFocus()

        self.parallel_stub_radioButton.setChecked(True)

        self.calculate_matching()


    def calculate_matching(self):

        if self.parallel_stub_radioButton.isChecked():
            self.Plot_impendace_admittance_button.setText("Plot Y(z)")
        elif self.series_stub_radioButton.isChecked():
            self.Plot_impendace_admittance_button.setText("Plot Z(z)")


        if self.parallel_stub_radioButton.isChecked():
            self.setWindowTitle("Parallel Stub Matching")
        elif self.series_stub_radioButton.isChecked():
            self.setWindowTitle("Series Stub Matching")

        
        if self.OC_radioButton.isChecked() or self.SC_radioButton.isChecked():
            self.length_horizontalScrollBar.setEnabled(True)
            self.label_4.setEnabled(True)
            self.label_6.setEnabled(True)
            self.length_lineedit.setEnabled(True)   
        else:
            self.length_horizontalScrollBar.setEnabled(False)
            self.label_4.setEnabled(False)
            self.label_6.setEnabled(False)
            self.length_lineedit.setEnabled(False)   
    


        # reading
        try:
            ZL = complex(self.ZL_lineedit.text())
        except Exception as e:
            ZL = msg_error
        
        try:
            Z0 = complex(self.Z0_lineedit.text())
        except Exception as e:
            Z0 = msg_error

        try:
            Z0_stub = complex(self.Z0_stub_lineedit.text())
        except Exception as e:
            Z0_stub = msg_error


        d = float(self.distance_horizontalScrollBar.value()*RANGE_SCROLLBAR/MAX_SCROLLBAR)
        self.distance_lineedit.setText("{:.3f}".format(d))
        l =float(self.length_horizontalScrollBar.value()*RANGE_SCROLLBAR/MAX_SCROLLBAR)
        self.length_lineedit.setText("{:.3f}".format(l))



        # computing
        try:
            Zv1 = Z0 * (ZL - 1j*Z0*math.tan(2*math.pi*-d))/(Z0-1j*ZL*math.tan(2*math.pi*-d))
        except Exception as e:
            Zv1 = msg_error

        try:
            if self.OC_radioButton.isChecked():
                Zstub = -1j*Z0_stub/math.tan(2*math.pi*l)
            elif self.SC_radioButton.isChecked():
                Zstub = 1j*Z0_stub*math.tan(2*math.pi*l)
        except Exception as e:
            Zstub = math.inf


        try:
            if self.parallel_stub_radioButton.isChecked():
                if Zstub == np.inf:
                    Zv2 = Zv1
                else:
                    Zv2 = parallel(Zv1, Zstub)
            elif self.series_stub_radioButton.isChecked():
                Zv2 = Zv1 + Zstub
        except Exception as e:
            Zv2 = msg_error



        # displaying

        THRESHOLD_OK_VAL = 0.05;


        try:
            self.Zv1_lineedit.setText("{:.4g}".format(Zv1))
        except Exception:
            self.Zv1_lineedit.setText(msg_error)

        try:
            if self.series_stub_radioButton.isChecked():
                if abs((Zv1/Z0).real -1 )< THRESHOLD_OK_VAL:
                    self.zv1_lineedit.setStyleSheet("color: green")
                    self.distance_lineedit.setStyleSheet("color: green")
                else:
                    self.zv1_lineedit.setStyleSheet("color: red")
                    self.distance_lineedit.setStyleSheet("color: black")
            elif self.parallel_stub_radioButton.isChecked():
                self.zv1_lineedit.setStyleSheet("color: black")
            
            self.zv1_lineedit.setText("{:.4g}".format(Zv1/Z0))
        except Exception:
            self.zv1_lineedit.setText(msg_error)


        try:
            self.Yv1_lineedit.setText("{:.4g}".format(1/Zv1))
        except Exception:
            self.Yv1_lineedit.setText(msg_error)

        try:
            yv1 = 1/(Zv1/Z0)
            if self.parallel_stub_radioButton.isChecked():
                if abs(yv1.real -1 )< THRESHOLD_OK_VAL:
                    self.yv1_lineedit.setStyleSheet("color: green")
                    self.distance_lineedit.setStyleSheet("color: green")
                else:
                    self.yv1_lineedit.setStyleSheet("color: red")
                    self.distance_lineedit.setStyleSheet("color: black")
            elif self.series_stub_radioButton.isChecked():
                self.yv1_lineedit.setStyleSheet("color: black")

            self.yv1_lineedit.setText("{:.4g}".format(yv1))
        except Exception as e:
            self.yv1_lineedit.setText(msg_error)




        try:
            self.Zv2_lineedit.setText("{:.4g}".format(Zv2))
        except Exception:
            self.Zv2_lineedit.setText(msg_error)

        try:
            zv2 = Zv2/Z0
            if self.series_stub_radioButton.isChecked():
                if abs(zv2.real-1)<=THRESHOLD_OK_VAL and abs(zv2.imag) <= THRESHOLD_OK_VAL:
                    self.zv2_lineedit.setStyleSheet("color: green")
                    self.length_lineedit.setStyleSheet("color: green")
                else:
                    self.zv2_lineedit.setStyleSheet("color: red")
                    self.length_lineedit.setStyleSheet("color: black")
            elif self.parallel_stub_radioButton.isChecked():
                self.zv2_lineedit.setStyleSheet("color: black")

            self.zv2_lineedit.setText("{:.4g}".format(zv2))
        except Exception as e:
            self.zv2_lineedit.setText(msg_error)


        try:
            if abs(zv2) < 1e-14:
                self.Yv2_lineedit.setText("∞")
            else:
                self.Yv2_lineedit.setText("{:.4g}".format(1/Zv2))
        except Exception:
            self.Yv2_lineedit.setText(msg_error)

        try:
            if abs(zv2) < 1e-14:
                self.yv2_lineedit.setText("∞")
            else:                
                yv2 = 1/(Zv2/Z0)
                if self.parallel_stub_radioButton.isChecked():
                    if abs(yv2.real-1)<=THRESHOLD_OK_VAL and abs(yv2.imag) <= THRESHOLD_OK_VAL:
                        self.yv2_lineedit.setStyleSheet("color: green")
                        self.length_lineedit.setStyleSheet("color: green")
                    else:
                        self.yv2_lineedit.setStyleSheet("color: red")
                        self.length_lineedit.setStyleSheet("color: black")
                elif self.series_stub_radioButton.isChecked():
                    self.yv2_lineedit.setStyleSheet("color: black")

                self.yv2_lineedit.setText("{:.4g}".format(yv2))
        except Exception as e:
            self.yv2_lineedit.setText(msg_error)


        return Z0, ZL


    def plot_impedance_admittance(self):
        plt.figure(figsize=(10,8))
        num_points = 200
        z = np.linspace(-0.5,0,num_points)
        
        Z0, ZL = self.calculate_matching()

        Z = Z0 * (ZL - 1j*Z0*np.tan(2*np.pi*z))/(Z0-1j*ZL*np.tan(2*np.pi*z))
        if self.parallel_stub_radioButton.isChecked():
            plt.title("y(z) @ $Z_L$={:.3g} $\Omega$, $Z_0$={:.2g} $\Omega$".format(ZL, Z0))
            plt.plot(z, (1/(Z/Z0)).real, label="Re{y(z)}", color="red", linewidth=0.8)
            plt.plot(z, (1/(Z/Z0)).imag, label="Im{y(z)}", color="blue", linewidth=0.8)
            plt.plot(z, np.linspace(1,1,num_points), label="y(z)=1", color="green", linewidth=1.2)
        
        elif self.series_stub_radioButton.isChecked():
            plt.title("z(z) @ $Z_L$={:.3g} $\Omega$, $Z_0$={:.2g} $\Omega$".format(ZL, Z0))
            plt.plot(z, Z.real/Z0, label="Re{z(z)}", color="red", linewidth=0.8)
            plt.plot(z, Z.imag/Z0, label="Im{z(z)}", color="blue", linewidth=0.8)
            plt.plot(z, np.linspace(1,1,num_points), label="z(z)=1", color="green", linewidth=1.2)
        

        plt.xlim(-0.5, 0)
        plt.ylim(-5, 5)
        plt.grid(True)
        plt.legend()
        plt.show()




    # A key has been pressed!
    def keyPressEvent(self, event):
        # Did the user press the Escape key?
        if event.key() == QtCore.Qt.Key_W:
            self.close()


if __name__ == "__main__":

    import sys
    app = QtWidgets.QApplication(sys.argv)
    nextGui = mainProgram()
    nextGui.show()
    sys.exit(app.exec_())